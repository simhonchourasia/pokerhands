{"version":3,"sources":["Form.js","App.js","reportWebVitals.js","index.js"],"names":["nats","values","cardNames","pokerHands","initCards","i","push","Form","state","cards","poker_hands","outputHands","map","hand","className","reconstructHand","toString","deconstructCard","card","val","slice","suit","findIndex","x","reconstructCard","dec","concat","ret","length","deconstructCombination","combo","is_4_1","is_3_2","is_3_1_1","is_2_2_1","is_2_1_1_1","getCombinations","a","b","c","d","e","getPokerHands","combinations","cardCombo","valid","currentCard","includes","isPokerHand","sort","c1","c2","minVal","ind","indexOf","console","log","compareHands","hand1","hand2","placeholder","value","onChange","newCards","target","toUpperCase","setState","poker","this","src","alt","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef7684ed.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst nats = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];\r\nconst values = ['X', 'X', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];\r\nconst cardNames = ['2C', '2D', '2H', '2S', '3C', '3D', '3H', '3S', '4C', '4D', '4H', '4S', \r\n            '5C', '5D', '5H', '5S', '6C', '6D', '6H', '6S', '7C', '7D', '7H', '7S',\r\n            '8C', '8D', '8H', '8S', '9C', '9D', '9H', '9S', '10C', '10D', '10H', '10S',\r\n            'JC', 'JD', 'JH', 'JS', 'QC', 'QD', 'QH', 'QS', 'KC', 'KD', 'KH', 'KS',\r\n            'AC', 'AD', 'AH', 'AS'];\r\nconst pokerHands = ['Royal Flush', 'Straight Flush', 'Four of a Kind', 'Full House', 'Flush', 'Straight', 'Three of a Kind', 'Two Pairs', 'One Pair', 'High Card'];\r\nconst initCards = [];\r\nfor (let i = 0; i < 13; i++) {\r\n    initCards.push('');\r\n}\r\ninitCards[0] = 'KS';\r\ninitCards[1] = 'KH';\r\ninitCards[2] = 'KD';\r\ninitCards[3] = '10H';\r\ninitCards[4] = '10S';\r\ninitCards[5] = '9D';\r\n\r\nclass Form extends React.Component {\r\n    state = {\r\n        cards: initCards,\r\n        poker_hands: []\r\n    }\r\n\r\n    outputHands = () => {\r\n        return this.state.poker_hands.map((hand)=>{\r\n            return (\r\n            <p className='results'>{hand[1] + ' ' + this.reconstructHand(hand).toString()}</p>\r\n        )})\r\n    }\r\n\r\n    // Returns an array containing card value and suit, in that order\r\n    // Example: '10C' becomes ['10', 'C']\r\n    // Faced cards are converted to numeric values\r\n    // Example: 'KH' becomes ['13', 'H'], and 'AS' becomes ['14', 'S']\r\n    deconstructCard = (card) => {\r\n        const val = card.slice(0, -1);\r\n        const suit = card.slice(-1);\r\n        const realVal = values.findIndex(x => x === val);\r\n        return [realVal, suit];\r\n    }\r\n\r\n    // Opposite of deconstructCard\r\n    reconstructCard = (dec) => {\r\n        let suit = '';\r\n        if (dec[1]==='H') suit = '♥';\r\n        if (dec[1]==='S') suit = '♠';\r\n        if (dec[1]==='D') suit = '♦';\r\n        if (dec[1]==='C') suit = '♣'\r\n        let val = dec[0];\r\n        if (val === 11) val = 'J';\r\n        if (val === 12) val = 'Q';\r\n        if (val === 13) val = 'K';\r\n        if (val === 14) val = 'A';\r\n        return val.toString().concat(suit);\r\n    }\r\n\r\n    // Reconstructs card for every card in a hand\r\n    reconstructHand = (hand) => {\r\n        let ret = [];\r\n        for (let i = 0; i < hand[0].length; i++) {\r\n            ret.push(this.reconstructCard(hand[0][i]))\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    // Returns an array containing the deconstruction of each card\r\n    deconstructCombination = (combo) => {\r\n        const ret = [];\r\n        for (let i = 0; i < combo.length; i++) {\r\n            ret.push(this.deconstructCard(combo[i]));\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    is_4_1 = (combo) => {\r\n        if (combo[0][0] === combo[1][0]  && combo[1][0] === combo[2][0] && combo[2][0] === combo[3][0]){\r\n            return true;}\r\n        if (combo[1][0] === combo[2][0] && combo[2][0] === combo[3][0] && combo[3][0] === combo[4][0]) {\r\n            return true;}\r\n        return false;\r\n    }\r\n\r\n    is_3_2 = (combo) => {\r\n        // check if the higher or lower is a triple\r\n        if (combo[0][0] === combo[2][0]) { // lower\r\n            if (combo[0][0] === combo[1][0] && combo[3][0] === combo[4][0]) return true;\r\n        }\r\n        if (combo[4][0] === combo[2][0]) { // higher\r\n            if (combo[0][0] === combo[1][0] && combo[3][0] === combo[4][0]) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    is_3_1_1 = (combo) => {\r\n        if (combo[0][0] === combo[1][0] && combo[1][0] === combo[2][0]) return true;\r\n        if (combo[1][0] === combo[2][0] && combo[2][0] === combo[3][0]) return true;\r\n        if (combo[2][0] === combo[3][0] && combo[3][0] === combo[4][0]) return true;\r\n        return false;\r\n    }\r\n\r\n    is_2_2_1 = (combo) => {\r\n        if (combo[0][0] === combo[1][0]) { //XXYYZ or XXYZZ\r\n            if (combo[2][0] === combo[3][0] || combo[3][0] === combo[4][0]) return true;\r\n        } else { // XYYZZ\r\n            if (combo[3][0] === combo[4][0]) return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    is_2_1_1_1 = (combo) => {\r\n        if (combo[0][0] === combo[1][0]) return true;\r\n        if (combo[2][0] === combo[1][0]) return true;\r\n        if (combo[2][0] === combo[3][0]) return true;\r\n        if (combo[4][0] === combo[3][0]) return true;\r\n        return false;\r\n    }\r\n\r\n    getCombinations = () => {\r\n        const ret = [];\r\n        for (let a = 0; a < 13; a++) {\r\n            for (let b = a+1; b < 13; b++) {\r\n                for (let c = b+1; c < 13; c++) {\r\n                    for (let d = c+1; d < 13; d++) {\r\n                        for (let e = d+1; e < 13; e++) {\r\n                            ret.push([a, b, c, d, e]);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    getPokerHands = () => {\r\n        const ret = [];\r\n        const combinations = this.getCombinations();\r\n        for (let i = 0; i < combinations.length; i++) {\r\n            // First check if they are valid cards\r\n            let cardCombo = [];\r\n            let valid = true;\r\n\r\n            for (let c = 0; c < 5; c++) {\r\n                let currentCard = this.state.cards[combinations[i][c]];\r\n                cardCombo.push(currentCard);\r\n                if (!cardNames.includes(currentCard)) valid = false;\r\n            }\r\n            // Check each type\r\n            if (valid) {\r\n                // Ordered by hand value\r\n                // royal flush, straight flush, 4-1, 3-2, flush, straight, 3-1-1, 2-2-1, 2-1-1-1, high card\r\n                \r\n                let isPokerHand = [true, true, true, true, true, true, true, true, true, true];\r\n                const cards = this.deconstructCombination(cardCombo);\r\n                cards.sort((c1, c2) => c1[0]-c2[0]) // sort by value\r\n\r\n                // Royal Flush\r\n                const suit = cards[0][1];\r\n                for (let c = 0; c < 5; c ++) {\r\n                    if (cards[c][1] === suit && cards[c][0] === 10+i) {//pass\r\n                    } else {isPokerHand[0] = false;}\r\n                }\r\n\r\n                // Straight Flush\r\n                const minVal = cards[0][0];\r\n                for (let c = 0; c < 5; c++) {\r\n                    if (cards[c][1] === suit && cards[c][0] === minVal+c) {//pass\r\n                    } else {isPokerHand[1] = false;}\r\n                }\r\n\r\n                // Four of a Kind\r\n                if (! this.is_4_1(cards)) isPokerHand[2] = false;\r\n\r\n                // Full House\r\n                if (! this.is_3_2(cards)) isPokerHand[3] = false;\r\n\r\n                // Flush\r\n                for (let c = 0; c < 5; c++) {\r\n                    if (cards[c][1] === suit) {//pass\r\n                    } else {isPokerHand[4] = false;}\r\n                }\r\n\r\n                // Straight\r\n                for (let c = 0; c < 5; c++) {\r\n                    if (cards[c][0] === minVal+c) {//pass \r\n                    } else {isPokerHand[5] = false;}\r\n                }\r\n                \r\n                // Three of a Kind\r\n                if (!this.is_3_1_1(cards)) isPokerHand[6] = false;\r\n\r\n                // Two Pairs\r\n                if (!this.is_2_2_1(cards)) isPokerHand[7] = false;\r\n\r\n                // One Pair\r\n                if (!this.is_2_1_1_1(cards)) isPokerHand[8] = false;\r\n\r\n                // High Card\r\n                // Always true\r\n\r\n                // Add to ret with the corresponding label\r\n                const ind = isPokerHand.indexOf(true);\r\n                const hand = [cards, pokerHands[ind]];\r\n                console.log(hand);\r\n                ret.push(hand);\r\n\r\n            }\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    // Comparison function for poker hands\r\n    // Only compares types of hands, doesn't compare individual cards\r\n    // Hands are given in the form [(type), [[V, S], [V, S], [V, S], [V, S], [V, S]]]\r\n    compareHands = (hand1, hand2) => {\r\n        const type1 = pokerHands.indexOf(hand1[1]);\r\n        const type2 = pokerHands.indexOf(hand2[1]);\r\n        return type1 - type2;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n            <form>\r\n                {nats.map((i) => (\r\n                    <div>\r\n                        \r\n                        <input placeholder='Card name' value={this.state.cards[i]}\r\n                            onChange={e => {\r\n                                \r\n                                const newCards = this.state.cards;\r\n                                newCards[i] = e.target.value.toUpperCase();\r\n                                this.setState({cards: newCards});\r\n                                const poker = this.getPokerHands();\r\n                                poker.sort(this.compareHands);\r\n                                this.setState({poker_hands: poker});\r\n                            }}/>\r\n\r\n                        <br/>\r\n                    </div>\r\n                        )\r\n                )}\r\n            </form>\r\n\r\n            <div>\r\n                {this.state.cards.map((card) => {\r\n                    return(\r\n                    cardNames.includes(card) ? <img src={'img/'+card+'.png'} alt=''/> : null\r\n                )})}\r\n            </div>\r\n\r\n            <div>\r\n                {this.outputHands()}\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Form;","import './App.css';\nimport Form from './Form';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <h5 className=\"App-header\">\n        Find out if you have a poker hand by inputting your cards. \n        Input cards in the following format: \"[value] [suit letter]\". \n        For example, you would input a 10 of hearts with \"10 H\", and a king of spades with \"K S\". \n      </h5>\n      <br/>\n      <div className='Input'><Form/></div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}